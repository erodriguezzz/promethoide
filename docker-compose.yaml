version: '3.8'

# https://docs.docker.com/network/drivers/: bridge mode by default
networks:
    operations-net:
    services-net:

volumes:
  # Metrics storage
  prometheus-data:
    driver: local
  # Config files and dashboards configurations
  grafana-data:
    driver: local

services:
    # This service scrapes metrics over http on other services and systems
    prometheus:
        image: prom/prometheus:latest
        container_name: prometheus
        restart: unless-stopped
        volumes:
            - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
            - prometheus-data:/prometheus
        command:
            - '--config.file=/etc/prometheus/prometheus.yml'
            - '--storage.tsdb.path=/prometheus'
            - '--web.console.libraries=/etc/prometheus/console_libraries'
            - '--web.console.templates=/etc/prometheus/consoles'
            - '--web.enable-lifecycle'
        # TODO: Para qué el expose?
        expose:
            - 9090
        ports:
            - 9090:9090
        networks:
            - operations-net
            - services-net

    grafana:
        image: grafana/grafana-oss:latest
        container_name: grafana
        restart: unless-stopped
        volumes:
            - grafana-data:/var/lib/grafana
            - ./grafana/grafana.ini:/etc/grafana/grafana.ini
            - ./grafana/provisioning:/etc/grafana/provisioning
        # TODO: Por qué haria falta el expose?
        environment:
            - GF_SMTP_ENABLED=true
            - GF_SMTP_HOST=${GR_SMTP_HOST}
            - GF_SMTP_USER=${GF_SMTP_FROM_ADDRESS}
            - GF_SMTP_PASSWORD=${GF_SMTP_PASSWORD}
            - GF_SMTP_FROM_ADDRESS=${GF_SMTP_FROM_ADDRESS}
            - GF_SMTP_FROM_NAME=${GF_SMTP_FROM_NAME}
            - GF_SMTP_SKIP_VERIFY=true
        expose:
            - 3000
        ports:
            - 3000:3000
        networks:
            - operations-net

    node-exporter:
        image: prom/node-exporter:latest
        container_name: node-exporter
        restart: unless-stopped
        volumes:
            - /proc:/host/proc:ro
            - /sys:/host/sys:ro
            - /:/rootfs:ro
        command:
            - '--path.procfs=/host/proc'
            - '--path.rootfs=/rootfs'
            - '--path.sysfs=/host/sys'
            - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
        expose:
            - 9100
        networks:
            - services-net

    rest-api:
        image: python:3.10
        container_name: rest-api
        restart: unless-stopped
        command: /bin/sh -c "pip install -r requirements.txt && uvicorn main:app --host 0.0.0.0 --port 5001"
        volumes:
            - ./api:/app
        working_dir: /app
        environment:
            - POSTGRES_USER=${POSTGRES_USER}
            - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
            - POSTGRES_DB=${POSTGRES_DB}
            - POSTGRES_HOST=${POSTGRES_HOST}
            - POSTGRES_PORT=${POSTGRES_PORT}
        ports:
            - "5001:5001"
        depends_on:
            - postgres
        networks:
            - services-net

    postgres:
        image: postgres
        container_name: postgres
        volumes:
            - ./postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
        environment:
            POSTGRES_USER: ${POSTGRES_USER}
            POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
            POSTGRES_DB: ${POSTGRES_DB}
            POSTGRES_MAX_CONNECTIONS: 1000
        ports:
            - 5432:5432
        networks:
            - services-net
        restart: unless-stopped
