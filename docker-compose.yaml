version: '3.8'

networks:
    monitor-net:
        driver: bridge # https://docs.docker.com/network/drivers/

volumes:
  # Metrics storage
  prometheus-data:
    driver: local
  # Config files and dashboards configurations
  grafana-data:
    driver: local

services:
    # This service scrapes metrics over http on other services and systems
    prometheus:
        image: prom/prometheus:latest
        container_name: prometheus
        restart: unless-stopped
        volumes:
            - ./prometheus.yml:/etc/prometheus/prometheus.yml
            - prometheus-data:/prometheus
        command:
            - '--config.file=/etc/prometheus/prometheus.yml'
            - '--storage.tsdb.path=/prometheus'
            - '--web.console.libraries=/etc/prometheus/console_libraries'
            - '--web.console.templates=/etc/prometheus/consoles'
            - '--web.enable-lifecycle'
        # TODO: Para qué el expose?
        expose:
            - 9090
        ports:
            - 9090:9090
        networks:
            - monitor-net

    grafana:
        image: grafana/grafana:latest
        container_name: grafana
        restart: unless-stopped
        # TODO: Volumenes
        # TODO: Por qué haria falta el expose?
        expose:
            - 3000
        ports:
            - 3000:3000
        networks:
            - monitor-net

    node-exporter:
        image: prom/node-exporter:latest
        container_name: node-exporter
        restart: unless-stopped
        volumes:
            - /proc:/host/proc:ro
            - /sys:/host/sys:ro
            - /:/rootfs:ro
        command:
            - '--path.procfs=/host/proc'
            - '--path.rootfs=/rootfs'
            - '--path.sysfs=/host/sys'
            - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
        expose:
            - 9100
        networks:
            - monitor-net

    rest-api:
        image: python:latest
        container_name: rest-api
        restart: unless-stopped
        volumes:
            - ./api:/usr/src/app
        ports:
            - 5001:5001
        networks:
            - monitor-net
        command: sh -c "cd /usr/src/app && pip install fastapi && pip install psycopg2 && pip install uvicorn && python3 api.py"

    postgres:
        image: postgres
        container_name: postgres_container
        volumes:
            - ./postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
        environment:
            POSTGRES_USER: ${POSTGRES_USER}
            POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
        ports:
            - 5432:5432
        networks:
            - monitor-net
        restart: unless-stopped

    smtp-server:
        container_name: smtp-server
        build:
            context: ./smtp-server
            args:
                - EMAIL=${EMAIL}
                - EMAIL_PASSWORD=${EMAIL_PASSWORD}
                - PORT=${PORT}
                - MAIL_NAME=${MAIL_NAME}
                - SMTP_DOMAIN=${SMTP_DOMAIN}
                - SMTP_PORT=${SMTP_PORT}
        networks:
            - monitor-net
        restart: unless-stopped